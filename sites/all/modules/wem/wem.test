<?php
/**
 * @file
 * This file is used for testing the wem core module.
 */

class WEMTestCase extends DrupalWebTestCase {

  /**
   * Returns info for this test.
   */
  public static function getInfo() {
    return array(
      'name' => 'WEM Core',
      'description' => 'Ensures the wem core functionality works as intended.',
      'group' => 'WEM',
    );
  }

  /**
   * Sets up the test.
   */
  public function setUp() {
    $this->profile = 'testing';
    parent::setUp(array('wem'));
  }

  /**
   * Test event tracking.
   *
   * This will test these functions:
   *  hook_user_login()
   *  hook_user_logout()
   *  hook_user_insert()
   *  wem_event_count()
   *  wem_event_delete()
   *  wem_last_event()
   */
  public function testWemEventCount() {

    $this->addAnonymousEvents();
    // Test anonymous event tracking.
    $this->assertEqual(4, wem_event_count(array('uid' => wem_get_user_id())), "Total anonymous events equals 4.");
    $this->assertEqual(3, wem_event_count(array(
      'name' => 'test1',
      'uid' => wem_get_user_id(),
    )), "Number of events called 'test1' equals 3.");
    $this->assertEqual(2, wem_event_count(array(
      'value' => 'test1',
      'uid' => wem_get_user_id(),
    )), "Number of events with value 'test1' equals 2.");

    $this->addUserEvents();
    // Test logged in user event tracking.
    $this->assertEqual(1, wem_event_count(array(
      'name' => 'user_new',
      'uid' => $this->loggedInUser->uid,
    )), "New user event exists.");
    $this->assertEqual(1, wem_event_count(array(
      'name' => 'user_login',
      'uid' => $this->loggedInUser->uid,
    )), "user login event exists.");
    $this->assertEqual(7, wem_event_count(array('uid' => $this->loggedInUser->uid)), "Total events for logged in user is 7.");
    $this->assertEqual(11, wem_event_count(), "Total events equals 10.");
    $this->assertEqual(1, wem_event_count(array(
      'name' => 'test2',
      'uid' => $this->loggedInUser->uid,
    )), "Total events with name 'test2' equals 1.");

    // Test deleting an event.
    wem_event_delete(array(
      'name' => 'user_new',
      'uid' => $this->loggedInUser->uid,
    ));

    $this->assertEqual(FALSE, wem_event_count(array(
      'name' => 'user_new',
      'uid' => $this->loggedInUser->uid,
    )), "New user event deleted.");
    $last_event = wem_last_event(array('uid' => $this->loggedInUser->uid));
    $this->assertEqual('user_login', $last_event->name, "Last user event is 'user_login'.");
  }

  /**
   * Tests the WEM Api that the javascript uses.
   */
  public function testWemApi() {
    global $user;
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);

    $token = $this->drupalGet("wem/api/get_token");
    $uid = $this->drupalGet("wem/api/get_uid");

    $url = "wem/api/invalid_token/" . $uid;
    $response = $this->drupalGet($url);
    // $this->assertEqual($response, "invalid token", "Token is invalid.");
    // @todo: Get event tracking through API to work.
  }


  /**
   * Add events for an anonymous user.
   */
  protected function addAnonymousEvents() {
    $events[] = array(
      'name' => 'test1',
      'value' => 'test1',
      'uid' => wem_get_user_id(),
      'timestamp' => REQUEST_TIME - 50,
    );
    $events[] = array(
      'name' => 'test2',
      'value' => 'test1',
      'uid' => wem_get_user_id(),
      'timestamp' => REQUEST_TIME - 40,
    );
    $events[] = array(
      'name' => 'test1',
      'value' => 'test2',
      'uid' => wem_get_user_id(),
      'timestamp' => REQUEST_TIME - 30,
    );
    $events[] = array(
      'name' => 'test1',
      'value' => 'test3',
      'uid' => wem_get_user_id(),
      'timestamp' => REQUEST_TIME - 20,
    );
    foreach ($events as $fields) {
      wem_event_track($fields);
    }
  }

  /**
   * Add events for a logged in user.
   */
  protected function addUserEvents() {
    global $user;
    $user = $this->drupalCreateUser();
    $this->drupalLogin($user);
    $events[] = array(
      'name' => 'test1',
      'value' => 'test1',
      'uid' => $this->loggedInUser->uid,
      'timestamp' => REQUEST_TIME - 50,
    );
    $events[] = array(
      'name' => 'test2',
      'value' => 'test1',
      'uid' => $this->loggedInUser->uid,
      'timestamp' => REQUEST_TIME - 40,
    );
    $events[] = array(
      'name' => 'test1',
      'value' => 'test2',
      'uid' => $this->loggedInUser->uid,
      'timestamp' => REQUEST_TIME - 30,
    );
    $events[] = array(
      'name' => 'test1',
      'value' => 'test3',
      'uid' => $this->loggedInUser->uid,
      'timestamp' => REQUEST_TIME - 20,
    );
    foreach ($events as $fields) {
      wem_event_track($fields);
    }
  }

}
